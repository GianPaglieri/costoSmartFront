{"ast":null,"code":"import _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport { Background, getDefaultHeaderHeight, SafeAreaProviderCompat } from '@react-navigation/elements';\nimport Color from 'color';\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { forModalPresentationIOS, forNoAnimation as forNoAnimationCard } from \"../../TransitionConfigs/CardStyleInterpolators\";\nimport { DefaultTransition, ModalFadeTransition, ModalTransition } from \"../../TransitionConfigs/TransitionPresets\";\nimport getDistanceForDirection from \"../../utils/getDistanceForDirection\";\nimport { MaybeScreen, MaybeScreenContainer } from \"../Screens\";\nimport CardContainer from \"./CardContainer\";\nvar EPSILON = 0.01;\nvar STATE_INACTIVE = 0;\nvar STATE_TRANSITIONING_OR_BELOW_TOP = 1;\nvar STATE_ON_TOP = 2;\nvar FALLBACK_DESCRIPTOR = Object.freeze({\n  options: {}\n});\nvar getInterpolationIndex = function getInterpolationIndex(scenes, index) {\n  var cardStyleInterpolator = scenes[index].descriptor.options.cardStyleInterpolator;\n  var interpolationIndex = 0;\n  for (var i = index - 1; i >= 0; i--) {\n    var _scenes$i;\n    var cardStyleInterpolatorCurrent = (_scenes$i = scenes[i]) === null || _scenes$i === void 0 ? void 0 : _scenes$i.descriptor.options.cardStyleInterpolator;\n    if (cardStyleInterpolatorCurrent !== cardStyleInterpolator) {\n      break;\n    }\n    interpolationIndex++;\n  }\n  return interpolationIndex;\n};\nvar getHeaderHeights = function getHeaderHeights(scenes, insets, isParentHeaderShown, layout, previous) {\n  return scenes.reduce(function (acc, curr, index) {\n    var _curr$descriptor$opti = curr.descriptor.options,\n      _curr$descriptor$opti2 = _curr$descriptor$opti.headerStatusBarHeight,\n      headerStatusBarHeight = _curr$descriptor$opti2 === void 0 ? isParentHeaderShown ? 0 : insets.top : _curr$descriptor$opti2,\n      cardStyleInterpolator = _curr$descriptor$opti.cardStyleInterpolator,\n      headerStyle = _curr$descriptor$opti.headerStyle;\n    var style = StyleSheet.flatten(headerStyle || {});\n    var height = typeof style.height === 'number' ? style.height : previous[curr.route.key];\n    var interpolationIndex = getInterpolationIndex(scenes, index);\n    var isModalPresentation = cardStyleInterpolator === forModalPresentationIOS;\n    var isModal = isModalPresentation && interpolationIndex !== 0;\n    acc[curr.route.key] = typeof height === 'number' ? height : getDefaultHeaderHeight(layout, isModal, headerStatusBarHeight);\n    return acc;\n  }, {});\n};\nvar getDistanceFromOptions = function getDistanceFromOptions(layout, descriptor) {\n  var _ref = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {},\n    presentation = _ref.presentation,\n    _ref$gestureDirection = _ref.gestureDirection,\n    gestureDirection = _ref$gestureDirection === void 0 ? presentation === 'modal' ? ModalTransition.gestureDirection : DefaultTransition.gestureDirection : _ref$gestureDirection;\n  return getDistanceForDirection(layout, gestureDirection);\n};\nvar getProgressFromGesture = function getProgressFromGesture(gesture, layout, descriptor) {\n  var distance = getDistanceFromOptions({\n    width: Math.max(1, layout.width),\n    height: Math.max(1, layout.height)\n  }, descriptor);\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0]\n    });\n  }\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1]\n  });\n};\nvar CardStack = function (_React$Component) {\n  _inherits(CardStack, _React$Component);\n  var _super = _createSuper(CardStack);\n  function CardStack(_props) {\n    var _this;\n    _classCallCheck(this, CardStack);\n    _this = _super.call(this, _props);\n    _defineProperty(_assertThisInitialized(_this), \"handleLayout\", function (e) {\n      var _e$nativeEvent$layout = e.nativeEvent.layout,\n        height = _e$nativeEvent$layout.height,\n        width = _e$nativeEvent$layout.width;\n      var layout = {\n        width: width,\n        height: height\n      };\n      _this.setState(function (state, props) {\n        if (height === state.layout.height && width === state.layout.width) {\n          return null;\n        }\n        return {\n          layout: layout,\n          headerHeights: getHeaderHeights(state.scenes, props.insets, props.isParentHeaderShown, layout, state.headerHeights)\n        };\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleHeaderLayout\", function (_ref2) {\n      var route = _ref2.route,\n        height = _ref2.height;\n      _this.setState(function (_ref3) {\n        var headerHeights = _ref3.headerHeights;\n        var previousHeight = headerHeights[route.key];\n        if (previousHeight === height) {\n          return null;\n        }\n        return {\n          headerHeights: _objectSpread(_objectSpread({}, headerHeights), {}, _defineProperty2({}, route.key, height))\n        };\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"getFocusedRoute\", function () {\n      var state = _this.props.state;\n      return state.routes[state.index];\n    });\n    _defineProperty(_assertThisInitialized(_this), \"getPreviousScene\", function (_ref4) {\n      var route = _ref4.route;\n      var getPreviousRoute = _this.props.getPreviousRoute;\n      var scenes = _this.state.scenes;\n      var previousRoute = getPreviousRoute({\n        route: route\n      });\n      if (previousRoute) {\n        var previousScene = scenes.find(function (scene) {\n          return scene.descriptor.route.key === previousRoute.key;\n        });\n        return previousScene;\n      }\n      return undefined;\n    });\n    _this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: SafeAreaProviderCompat.initialMetrics.frame,\n      descriptors: _this.props.descriptors,\n      headerHeights: {}\n    };\n    return _this;\n  }\n  _createClass(CardStack, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var _this$props = this.props,\n        insets = _this$props.insets,\n        state = _this$props.state,\n        routes = _this$props.routes,\n        closingRouteKeys = _this$props.closingRouteKeys,\n        onOpenRoute = _this$props.onOpenRoute,\n        onCloseRoute = _this$props.onCloseRoute,\n        renderHeader = _this$props.renderHeader,\n        renderScene = _this$props.renderScene,\n        isParentHeaderShown = _this$props.isParentHeaderShown,\n        onTransitionStart = _this$props.onTransitionStart,\n        onTransitionEnd = _this$props.onTransitionEnd,\n        onGestureStart = _this$props.onGestureStart,\n        onGestureEnd = _this$props.onGestureEnd,\n        onGestureCancel = _this$props.onGestureCancel,\n        _this$props$detachIna = _this$props.detachInactiveScreens,\n        detachInactiveScreens = _this$props$detachIna === void 0 ? Platform.OS === 'web' || Platform.OS === 'android' || Platform.OS === 'ios' : _this$props$detachIna;\n      var _this$state = this.state,\n        scenes = _this$state.scenes,\n        layout = _this$state.layout,\n        gestures = _this$state.gestures,\n        headerHeights = _this$state.headerHeights;\n      var focusedRoute = state.routes[state.index];\n      var focusedHeaderHeight = headerHeights[focusedRoute.key];\n      var isFloatHeaderAbsolute = this.state.scenes.slice(-2).some(function (scene) {\n        var _scene$descriptor$opt;\n        var options = (_scene$descriptor$opt = scene.descriptor.options) !== null && _scene$descriptor$opt !== void 0 ? _scene$descriptor$opt : {};\n        var headerMode = options.headerMode,\n          headerTransparent = options.headerTransparent,\n          _options$headerShown = options.headerShown,\n          headerShown = _options$headerShown === void 0 ? true : _options$headerShown;\n        if (headerTransparent || headerShown === false || headerMode === 'screen') {\n          return true;\n        }\n        return false;\n      });\n      var activeScreensLimit = 1;\n      for (var i = scenes.length - 1; i >= 0; i--) {\n        var options = scenes[i].descriptor.options;\n        var _options$detachPrevio = options.detachPreviousScreen,\n          detachPreviousScreen = _options$detachPrevio === void 0 ? options.presentation === 'transparentModal' ? false : options.cardStyleInterpolator === forModalPresentationIOS ? i !== scenes.map(function (scene) {\n            return scene.descriptor.options.cardStyleInterpolator;\n          }).lastIndexOf(forModalPresentationIOS) : true : _options$detachPrevio;\n        if (detachPreviousScreen === false) {\n          activeScreensLimit++;\n        } else {\n          break;\n        }\n      }\n      var floatingHeader = React.createElement(React.Fragment, {\n        key: \"header\"\n      }, renderHeader({\n        mode: 'float',\n        layout: layout,\n        scenes: scenes,\n        getPreviousScene: this.getPreviousScene,\n        getFocusedRoute: this.getFocusedRoute,\n        onContentHeightChange: this.handleHeaderLayout,\n        style: [styles.floating, isFloatHeaderAbsolute && [{\n          height: focusedHeaderHeight\n        }, styles.absolute]]\n      }));\n      return React.createElement(Background, null, isFloatHeaderAbsolute ? null : floatingHeader, React.createElement(MaybeScreenContainer, {\n        enabled: detachInactiveScreens,\n        style: styles.container,\n        onLayout: this.handleLayout\n      }, routes.map(function (route, index, self) {\n        var _scenes, _scenes2;\n        var focused = focusedRoute.key === route.key;\n        var gesture = gestures[route.key];\n        var scene = scenes[index];\n        var isScreenActive = 1;\n        if (index < self.length - activeScreensLimit - 1) {\n          isScreenActive = STATE_INACTIVE;\n        } else {\n          var sceneForActivity = scenes[self.length - 1];\n          var outputValue = index === self.length - 1 ? STATE_ON_TOP : index >= self.length - activeScreensLimit ? STATE_TRANSITIONING_OR_BELOW_TOP : STATE_INACTIVE;\n          isScreenActive = sceneForActivity ? sceneForActivity.progress.current.interpolate({\n            inputRange: [0, 1 - EPSILON, 1],\n            outputRange: [1, 1, outputValue],\n            extrapolate: 'clamp'\n          }) : STATE_TRANSITIONING_OR_BELOW_TOP;\n        }\n        var _scene$descriptor$opt2 = scene.descriptor.options,\n          _scene$descriptor$opt3 = _scene$descriptor$opt2.headerShown,\n          headerShown = _scene$descriptor$opt3 === void 0 ? true : _scene$descriptor$opt3,\n          headerTransparent = _scene$descriptor$opt2.headerTransparent,\n          headerStyle = _scene$descriptor$opt2.headerStyle,\n          headerTintColor = _scene$descriptor$opt2.headerTintColor;\n        var safeAreaInsetTop = insets.top;\n        var safeAreaInsetRight = insets.right;\n        var safeAreaInsetBottom = insets.bottom;\n        var safeAreaInsetLeft = insets.left;\n        var headerHeight = headerShown !== false ? headerHeights[route.key] : 0;\n        var _ref5 = StyleSheet.flatten(headerStyle) || {},\n          headerBackgroundColor = _ref5.backgroundColor;\n        var headerDarkContent;\n        if (headerShown) {\n          if (headerTintColor) {\n            headerDarkContent = Color(headerTintColor).isDark();\n          } else if (typeof headerBackgroundColor === 'string') {\n            headerDarkContent = !Color(headerBackgroundColor).isDark();\n          }\n        }\n        var interpolationIndex = getInterpolationIndex(scenes, index);\n        var isNextScreenTransparent = ((_scenes = scenes[index + 1]) === null || _scenes === void 0 ? void 0 : _scenes.descriptor.options.presentation) === 'transparentModal';\n        var detachCurrentScreen = ((_scenes2 = scenes[index + 1]) === null || _scenes2 === void 0 ? void 0 : _scenes2.descriptor.options.detachPreviousScreen) !== false;\n        return React.createElement(MaybeScreen, {\n          key: route.key,\n          style: StyleSheet.absoluteFill,\n          enabled: detachInactiveScreens,\n          active: isScreenActive,\n          pointerEvents: \"box-none\"\n        }, React.createElement(CardContainer, {\n          index: index,\n          interpolationIndex: interpolationIndex,\n          active: index === self.length - 1,\n          focused: focused,\n          closing: closingRouteKeys.includes(route.key),\n          layout: layout,\n          gesture: gesture,\n          scene: scene,\n          safeAreaInsetTop: safeAreaInsetTop,\n          safeAreaInsetRight: safeAreaInsetRight,\n          safeAreaInsetBottom: safeAreaInsetBottom,\n          safeAreaInsetLeft: safeAreaInsetLeft,\n          onGestureStart: onGestureStart,\n          onGestureCancel: onGestureCancel,\n          onGestureEnd: onGestureEnd,\n          headerHeight: headerHeight,\n          isParentHeaderShown: isParentHeaderShown,\n          onHeaderHeightChange: _this2.handleHeaderLayout,\n          getPreviousScene: _this2.getPreviousScene,\n          getFocusedRoute: _this2.getFocusedRoute,\n          headerDarkContent: headerDarkContent,\n          hasAbsoluteFloatHeader: isFloatHeaderAbsolute && !headerTransparent,\n          renderHeader: renderHeader,\n          renderScene: renderScene,\n          onOpenRoute: onOpenRoute,\n          onCloseRoute: onCloseRoute,\n          onTransitionStart: onTransitionStart,\n          onTransitionEnd: onTransitionEnd,\n          isNextScreenTransparent: isNextScreenTransparent,\n          detachCurrentScreen: detachCurrentScreen\n        }));\n      })), isFloatHeaderAbsolute ? floatingHeader : null);\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if (props.routes === state.routes && props.descriptors === state.descriptors) {\n        return null;\n      }\n      var gestures = props.routes.reduce(function (acc, curr) {\n        var descriptor = props.descriptors[curr.key];\n        var _ref6 = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {},\n          animationEnabled = _ref6.animationEnabled;\n        acc[curr.key] = state.gestures[curr.key] || new Animated.Value(props.openingRouteKeys.includes(curr.key) && animationEnabled !== false ? getDistanceFromOptions(state.layout, descriptor) : 0);\n        return acc;\n      }, {});\n      var scenes = props.routes.map(function (route, index, self) {\n        var _descriptor$options$h;\n        var previousRoute = self[index - 1];\n        var nextRoute = self[index + 1];\n        var oldScene = state.scenes[index];\n        var currentGesture = gestures[route.key];\n        var previousGesture = previousRoute ? gestures[previousRoute.key] : undefined;\n        var nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n        var descriptor = props.descriptors[route.key] || state.descriptors[route.key] || (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n        var nextDescriptor = props.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key] || state.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key];\n        var previousDescriptor = props.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key] || state.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key];\n        var optionsForTransitionConfig = index !== self.length - 1 && nextDescriptor && nextDescriptor.options.presentation !== 'transparentModal' ? nextDescriptor.options : descriptor.options;\n        var defaultTransitionPreset = optionsForTransitionConfig.presentation === 'modal' ? ModalTransition : optionsForTransitionConfig.presentation === 'transparentModal' ? ModalFadeTransition : DefaultTransition;\n        var _optionsForTransition = optionsForTransitionConfig.animationEnabled,\n          animationEnabled = _optionsForTransition === void 0 ? Platform.OS !== 'web' && Platform.OS !== 'windows' && Platform.OS !== 'macos' : _optionsForTransition,\n          _optionsForTransition2 = optionsForTransitionConfig.gestureEnabled,\n          gestureEnabled = _optionsForTransition2 === void 0 ? Platform.OS === 'ios' && animationEnabled : _optionsForTransition2,\n          _optionsForTransition3 = optionsForTransitionConfig.gestureDirection,\n          gestureDirection = _optionsForTransition3 === void 0 ? defaultTransitionPreset.gestureDirection : _optionsForTransition3,\n          _optionsForTransition4 = optionsForTransitionConfig.transitionSpec,\n          transitionSpec = _optionsForTransition4 === void 0 ? defaultTransitionPreset.transitionSpec : _optionsForTransition4,\n          _optionsForTransition5 = optionsForTransitionConfig.cardStyleInterpolator,\n          cardStyleInterpolator = _optionsForTransition5 === void 0 ? animationEnabled === false ? forNoAnimationCard : defaultTransitionPreset.cardStyleInterpolator : _optionsForTransition5,\n          _optionsForTransition6 = optionsForTransitionConfig.headerStyleInterpolator,\n          headerStyleInterpolator = _optionsForTransition6 === void 0 ? defaultTransitionPreset.headerStyleInterpolator : _optionsForTransition6,\n          _optionsForTransition7 = optionsForTransitionConfig.cardOverlayEnabled,\n          cardOverlayEnabled = _optionsForTransition7 === void 0 ? Platform.OS !== 'ios' && optionsForTransitionConfig.presentation !== 'transparentModal' || cardStyleInterpolator === forModalPresentationIOS : _optionsForTransition7;\n        var headerMode = (_descriptor$options$h = descriptor.options.headerMode) !== null && _descriptor$options$h !== void 0 ? _descriptor$options$h : !(optionsForTransitionConfig.presentation === 'modal' || optionsForTransitionConfig.presentation === 'transparentModal' || (nextDescriptor === null || nextDescriptor === void 0 ? void 0 : nextDescriptor.options.presentation) === 'modal' || (nextDescriptor === null || nextDescriptor === void 0 ? void 0 : nextDescriptor.options.presentation) === 'transparentModal' || cardStyleInterpolator === forModalPresentationIOS) && Platform.OS === 'ios' && descriptor.options.header === undefined ? 'float' : 'screen';\n        var scene = {\n          route: route,\n          descriptor: _objectSpread(_objectSpread({}, descriptor), {}, {\n            options: _objectSpread(_objectSpread({}, descriptor.options), {}, {\n              animationEnabled: animationEnabled,\n              cardOverlayEnabled: cardOverlayEnabled,\n              cardStyleInterpolator: cardStyleInterpolator,\n              gestureDirection: gestureDirection,\n              gestureEnabled: gestureEnabled,\n              headerStyleInterpolator: headerStyleInterpolator,\n              transitionSpec: transitionSpec,\n              headerMode: headerMode\n            })\n          }),\n          progress: {\n            current: getProgressFromGesture(currentGesture, state.layout, descriptor),\n            next: nextGesture && nextDescriptor.options.presentation !== 'transparentModal' ? getProgressFromGesture(nextGesture, state.layout, nextDescriptor) : undefined,\n            previous: previousGesture ? getProgressFromGesture(previousGesture, state.layout, previousDescriptor) : undefined\n          },\n          __memo: [state.layout, descriptor, nextDescriptor, previousDescriptor, currentGesture, nextGesture, previousGesture]\n        };\n        if (oldScene && scene.__memo.every(function (it, i) {\n          return oldScene.__memo[i] === it;\n        })) {\n          return oldScene;\n        }\n        return scene;\n      });\n      return {\n        routes: props.routes,\n        scenes: scenes,\n        gestures: gestures,\n        descriptors: props.descriptors,\n        headerHeights: getHeaderHeights(scenes, props.insets, props.isParentHeaderShown, state.layout, state.headerHeights)\n      };\n    }\n  }]);\n  return CardStack;\n}(React.Component);\nexport { CardStack as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0\n  },\n  floating: {\n    zIndex: 1\n  }\n});","map":{"version":3,"names":["Background","getDefaultHeaderHeight","SafeAreaProviderCompat","Color","React","Animated","Platform","StyleSheet","forModalPresentationIOS","forNoAnimation","forNoAnimationCard","DefaultTransition","ModalFadeTransition","ModalTransition","getDistanceForDirection","MaybeScreen","MaybeScreenContainer","CardContainer","EPSILON","STATE_INACTIVE","STATE_TRANSITIONING_OR_BELOW_TOP","STATE_ON_TOP","FALLBACK_DESCRIPTOR","Object","freeze","options","getInterpolationIndex","scenes","index","cardStyleInterpolator","descriptor","interpolationIndex","i","_scenes$i","cardStyleInterpolatorCurrent","getHeaderHeights","insets","isParentHeaderShown","layout","previous","reduce","acc","curr","_curr$descriptor$opti","_curr$descriptor$opti2","headerStatusBarHeight","top","headerStyle","style","flatten","height","route","key","isModalPresentation","isModal","getDistanceFromOptions","_ref","presentation","_ref$gestureDirection","gestureDirection","getProgressFromGesture","gesture","distance","width","Math","max","interpolate","inputRange","outputRange","CardStack","_React$Component","_inherits","_super","_createSuper","_props","_this","_classCallCheck","call","_defineProperty","_assertThisInitialized","e","_e$nativeEvent$layout","nativeEvent","setState","state","props","headerHeights","_ref2","_ref3","previousHeight","_objectSpread","_defineProperty2","routes","_ref4","getPreviousRoute","previousRoute","previousScene","find","scene","undefined","gestures","initialMetrics","frame","descriptors","_createClass","value","render","_this2","_this$props","closingRouteKeys","onOpenRoute","onCloseRoute","renderHeader","renderScene","onTransitionStart","onTransitionEnd","onGestureStart","onGestureEnd","onGestureCancel","_this$props$detachIna","detachInactiveScreens","OS","_this$state","focusedRoute","focusedHeaderHeight","isFloatHeaderAbsolute","slice","some","_scene$descriptor$opt","headerMode","headerTransparent","_options$headerShown","headerShown","activeScreensLimit","length","_options$detachPrevio","detachPreviousScreen","map","lastIndexOf","floatingHeader","createElement","Fragment","mode","getPreviousScene","getFocusedRoute","onContentHeightChange","handleHeaderLayout","styles","floating","absolute","enabled","container","onLayout","handleLayout","self","_scenes","_scenes2","focused","isScreenActive","sceneForActivity","outputValue","progress","current","extrapolate","_scene$descriptor$opt2","_scene$descriptor$opt3","headerTintColor","safeAreaInsetTop","safeAreaInsetRight","right","safeAreaInsetBottom","bottom","safeAreaInsetLeft","left","headerHeight","_ref5","headerBackgroundColor","backgroundColor","headerDarkContent","isDark","isNextScreenTransparent","detachCurrentScreen","absoluteFill","active","pointerEvents","closing","includes","onHeaderHeightChange","hasAbsoluteFloatHeader","getDerivedStateFromProps","_ref6","animationEnabled","Value","openingRouteKeys","_descriptor$options$h","nextRoute","oldScene","currentGesture","previousGesture","nextGesture","nextDescriptor","previousDescriptor","optionsForTransitionConfig","defaultTransitionPreset","_optionsForTransition","_optionsForTransition2","gestureEnabled","_optionsForTransition3","_optionsForTransition4","transitionSpec","_optionsForTransition5","_optionsForTransition6","headerStyleInterpolator","_optionsForTransition7","cardOverlayEnabled","header","next","__memo","every","it","Component","default","create","flex","position","zIndex"],"sources":["C:\\Users\\Gian\\Desktop\\CostoSmart\\frontend\\node_modules\\@react-navigation\\stack\\lib\\module\\views\\Stack\\CardStack.tsx"],"sourcesContent":["import {\n  Background,\n  getDefaultHeaderHeight,\n  SafeAreaProviderCompat,\n} from '@react-navigation/elements';\nimport type {\n  ParamListBase,\n  Route,\n  StackNavigationState,\n} from '@react-navigation/native';\nimport Color from 'color';\nimport * as React from 'react';\nimport {\n  Animated,\n  LayoutChangeEvent,\n  Platform,\n  StyleSheet,\n} from 'react-native';\nimport type { EdgeInsets } from 'react-native-safe-area-context';\n\nimport {\n  forModalPresentationIOS,\n  forNoAnimation as forNoAnimationCard,\n} from '../../TransitionConfigs/CardStyleInterpolators';\nimport {\n  DefaultTransition,\n  ModalFadeTransition,\n  ModalTransition,\n} from '../../TransitionConfigs/TransitionPresets';\nimport type {\n  Layout,\n  Scene,\n  StackDescriptor,\n  StackDescriptorMap,\n  StackHeaderMode,\n  StackNavigationOptions,\n} from '../../types';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport type { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport { MaybeScreen, MaybeScreenContainer } from '../Screens';\nimport CardContainer from './CardContainer';\n\ntype GestureValues = {\n  [key: string]: Animated.Value;\n};\n\ntype Props = {\n  insets: EdgeInsets;\n  state: StackNavigationState<ParamListBase>;\n  descriptors: StackDescriptorMap;\n  routes: Route<string>[];\n  openingRouteKeys: string[];\n  closingRouteKeys: string[];\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  getPreviousRoute: (props: {\n    route: Route<string>;\n  }) => Route<string> | undefined;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  isParentHeaderShown: boolean;\n  onTransitionStart: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd: (props: { route: Route<string> }, closing: boolean) => void;\n  onGestureStart: (props: { route: Route<string> }) => void;\n  onGestureEnd: (props: { route: Route<string> }) => void;\n  onGestureCancel: (props: { route: Route<string> }) => void;\n  detachInactiveScreens?: boolean;\n};\n\ntype State = {\n  routes: Route<string>[];\n  descriptors: StackDescriptorMap;\n  scenes: Scene[];\n  gestures: GestureValues;\n  layout: Layout;\n  headerHeights: Record<string, number>;\n};\n\nconst EPSILON = 0.01;\n\nconst STATE_INACTIVE = 0;\nconst STATE_TRANSITIONING_OR_BELOW_TOP = 1;\nconst STATE_ON_TOP = 2;\n\nconst FALLBACK_DESCRIPTOR = Object.freeze({ options: {} });\n\nconst getInterpolationIndex = (scenes: Scene[], index: number) => {\n  const { cardStyleInterpolator } = scenes[index].descriptor.options;\n\n  // Start from current card and count backwards the number of cards with same interpolation\n  let interpolationIndex = 0;\n\n  for (let i = index - 1; i >= 0; i--) {\n    const cardStyleInterpolatorCurrent =\n      scenes[i]?.descriptor.options.cardStyleInterpolator;\n\n    if (cardStyleInterpolatorCurrent !== cardStyleInterpolator) {\n      break;\n    }\n\n    interpolationIndex++;\n  }\n\n  return interpolationIndex;\n};\n\nconst getHeaderHeights = (\n  scenes: Scene[],\n  insets: EdgeInsets,\n  isParentHeaderShown: boolean,\n  layout: Layout,\n  previous: Record<string, number>\n) => {\n  return scenes.reduce<Record<string, number>>((acc, curr, index) => {\n    const {\n      headerStatusBarHeight = isParentHeaderShown ? 0 : insets.top,\n      cardStyleInterpolator,\n      headerStyle,\n    } = curr.descriptor.options;\n\n    const style = StyleSheet.flatten(headerStyle || {});\n\n    const height =\n      typeof style.height === 'number'\n        ? style.height\n        : previous[curr.route.key];\n\n    const interpolationIndex = getInterpolationIndex(scenes, index);\n    const isModalPresentation =\n      cardStyleInterpolator === forModalPresentationIOS;\n    const isModal = isModalPresentation && interpolationIndex !== 0;\n\n    acc[curr.route.key] =\n      typeof height === 'number'\n        ? height\n        : getDefaultHeaderHeight(layout, isModal, headerStatusBarHeight);\n\n    return acc;\n  }, {});\n};\n\nconst getDistanceFromOptions = (\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const {\n    presentation,\n    gestureDirection = presentation === 'modal'\n      ? ModalTransition.gestureDirection\n      : DefaultTransition.gestureDirection,\n  } = (descriptor?.options || {}) as StackNavigationOptions;\n\n  return getDistanceForDirection(layout, gestureDirection);\n};\n\nconst getProgressFromGesture = (\n  gesture: Animated.Value,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const distance = getDistanceFromOptions(\n    {\n      // Make sure that we have a non-zero distance, otherwise there will be incorrect progress\n      // This causes blank screen on web if it was previously inside container with display: none\n      width: Math.max(1, layout.width),\n      height: Math.max(1, layout.height),\n    },\n    descriptor\n  );\n\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0],\n    });\n  }\n\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1],\n  });\n};\n\nexport default class CardStack extends React.Component<Props, State> {\n  static getDerivedStateFromProps(\n    props: Props,\n    state: State\n  ): Partial<State> | null {\n    if (\n      props.routes === state.routes &&\n      props.descriptors === state.descriptors\n    ) {\n      return null;\n    }\n\n    const gestures = props.routes.reduce<GestureValues>((acc, curr) => {\n      const descriptor = props.descriptors[curr.key];\n      const { animationEnabled } = descriptor?.options || {};\n\n      acc[curr.key] =\n        state.gestures[curr.key] ||\n        new Animated.Value(\n          props.openingRouteKeys.includes(curr.key) &&\n          animationEnabled !== false\n            ? getDistanceFromOptions(state.layout, descriptor)\n            : 0\n        );\n\n      return acc;\n    }, {});\n\n    const scenes = props.routes.map((route, index, self) => {\n      const previousRoute = self[index - 1];\n      const nextRoute = self[index + 1];\n\n      const oldScene = state.scenes[index];\n\n      const currentGesture = gestures[route.key];\n      const previousGesture = previousRoute\n        ? gestures[previousRoute.key]\n        : undefined;\n      const nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n\n      const descriptor =\n        props.descriptors[route.key] ||\n        state.descriptors[route.key] ||\n        (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n\n      const nextDescriptor =\n        props.descriptors[nextRoute?.key] || state.descriptors[nextRoute?.key];\n\n      const previousDescriptor =\n        props.descriptors[previousRoute?.key] ||\n        state.descriptors[previousRoute?.key];\n\n      // When a screen is not the last, it should use next screen's transition config\n      // Many transitions also animate the previous screen, so using 2 different transitions doesn't look right\n      // For example combining a slide and a modal transition would look wrong otherwise\n      // With this approach, combining different transition styles in the same navigator mostly looks right\n      // This will still be broken when 2 transitions have different idle state (e.g. modal presentation),\n      // but majority of the transitions look alright\n      const optionsForTransitionConfig =\n        index !== self.length - 1 &&\n        nextDescriptor &&\n        nextDescriptor.options.presentation !== 'transparentModal'\n          ? nextDescriptor.options\n          : descriptor.options;\n\n      let defaultTransitionPreset =\n        optionsForTransitionConfig.presentation === 'modal'\n          ? ModalTransition\n          : optionsForTransitionConfig.presentation === 'transparentModal'\n          ? ModalFadeTransition\n          : DefaultTransition;\n\n      const {\n        animationEnabled = Platform.OS !== 'web' &&\n          Platform.OS !== 'windows' &&\n          Platform.OS !== 'macos',\n        gestureEnabled = Platform.OS === 'ios' && animationEnabled,\n        gestureDirection = defaultTransitionPreset.gestureDirection,\n        transitionSpec = defaultTransitionPreset.transitionSpec,\n        cardStyleInterpolator = animationEnabled === false\n          ? forNoAnimationCard\n          : defaultTransitionPreset.cardStyleInterpolator,\n        headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n        cardOverlayEnabled = (Platform.OS !== 'ios' &&\n          optionsForTransitionConfig.presentation !== 'transparentModal') ||\n          cardStyleInterpolator === forModalPresentationIOS,\n      } = optionsForTransitionConfig;\n\n      const headerMode: StackHeaderMode =\n        descriptor.options.headerMode ??\n        (!(\n          optionsForTransitionConfig.presentation === 'modal' ||\n          optionsForTransitionConfig.presentation === 'transparentModal' ||\n          nextDescriptor?.options.presentation === 'modal' ||\n          nextDescriptor?.options.presentation === 'transparentModal' ||\n          cardStyleInterpolator === forModalPresentationIOS\n        ) &&\n        Platform.OS === 'ios' &&\n        descriptor.options.header === undefined\n          ? 'float'\n          : 'screen');\n\n      const scene = {\n        route,\n        descriptor: {\n          ...descriptor,\n          options: {\n            ...descriptor.options,\n            animationEnabled,\n            cardOverlayEnabled,\n            cardStyleInterpolator,\n            gestureDirection,\n            gestureEnabled,\n            headerStyleInterpolator,\n            transitionSpec,\n            headerMode,\n          },\n        },\n        progress: {\n          current: getProgressFromGesture(\n            currentGesture,\n            state.layout,\n            descriptor\n          ),\n          next:\n            nextGesture &&\n            nextDescriptor.options.presentation !== 'transparentModal'\n              ? getProgressFromGesture(\n                  nextGesture,\n                  state.layout,\n                  nextDescriptor\n                )\n              : undefined,\n          previous: previousGesture\n            ? getProgressFromGesture(\n                previousGesture,\n                state.layout,\n                previousDescriptor\n              )\n            : undefined,\n        },\n        __memo: [\n          state.layout,\n          descriptor,\n          nextDescriptor,\n          previousDescriptor,\n          currentGesture,\n          nextGesture,\n          previousGesture,\n        ],\n      };\n\n      if (\n        oldScene &&\n        scene.__memo.every((it, i) => {\n          // @ts-expect-error: we haven't added __memo to the annotation to prevent usage elsewhere\n          return oldScene.__memo[i] === it;\n        })\n      ) {\n        return oldScene;\n      }\n\n      return scene;\n    });\n\n    return {\n      routes: props.routes,\n      scenes,\n      gestures,\n      descriptors: props.descriptors,\n      headerHeights: getHeaderHeights(\n        scenes,\n        props.insets,\n        props.isParentHeaderShown,\n        state.layout,\n        state.headerHeights\n      ),\n    };\n  }\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: SafeAreaProviderCompat.initialMetrics.frame,\n      descriptors: this.props.descriptors,\n      // Used when card's header is null and mode is float to make transition\n      // between screens with headers and those without headers smooth.\n      // This is not a great heuristic here. We don't know synchronously\n      // on mount what the header height is so we have just used the most\n      // common cases here.\n      headerHeights: {},\n    };\n  }\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    const layout = { width, height };\n\n    this.setState((state, props) => {\n      if (height === state.layout.height && width === state.layout.width) {\n        return null;\n      }\n\n      return {\n        layout,\n        headerHeights: getHeaderHeights(\n          state.scenes,\n          props.insets,\n          props.isParentHeaderShown,\n          layout,\n          state.headerHeights\n        ),\n      };\n    });\n  };\n\n  private handleHeaderLayout = ({\n    route,\n    height,\n  }: {\n    route: Route<string>;\n    height: number;\n  }) => {\n    this.setState(({ headerHeights }) => {\n      const previousHeight = headerHeights[route.key];\n\n      if (previousHeight === height) {\n        return null;\n      }\n\n      return {\n        headerHeights: {\n          ...headerHeights,\n          [route.key]: height,\n        },\n      };\n    });\n  };\n\n  private getFocusedRoute = () => {\n    const { state } = this.props;\n\n    return state.routes[state.index];\n  };\n\n  private getPreviousScene = ({ route }: { route: Route<string> }) => {\n    const { getPreviousRoute } = this.props;\n    const { scenes } = this.state;\n\n    const previousRoute = getPreviousRoute({ route });\n\n    if (previousRoute) {\n      const previousScene = scenes.find(\n        (scene) => scene.descriptor.route.key === previousRoute.key\n      );\n\n      return previousScene;\n    }\n\n    return undefined;\n  };\n\n  render() {\n    const {\n      insets,\n      state,\n      routes,\n      closingRouteKeys,\n      onOpenRoute,\n      onCloseRoute,\n      renderHeader,\n      renderScene,\n      isParentHeaderShown,\n      onTransitionStart,\n      onTransitionEnd,\n      onGestureStart,\n      onGestureEnd,\n      onGestureCancel,\n      detachInactiveScreens = Platform.OS === 'web' ||\n        Platform.OS === 'android' ||\n        Platform.OS === 'ios',\n    } = this.props;\n\n    const { scenes, layout, gestures, headerHeights } = this.state;\n\n    const focusedRoute = state.routes[state.index];\n    const focusedHeaderHeight = headerHeights[focusedRoute.key];\n\n    const isFloatHeaderAbsolute = this.state.scenes.slice(-2).some((scene) => {\n      const options = scene.descriptor.options ?? {};\n      const { headerMode, headerTransparent, headerShown = true } = options;\n\n      if (\n        headerTransparent ||\n        headerShown === false ||\n        headerMode === 'screen'\n      ) {\n        return true;\n      }\n\n      return false;\n    });\n\n    let activeScreensLimit = 1;\n\n    for (let i = scenes.length - 1; i >= 0; i--) {\n      const { options } = scenes[i].descriptor;\n      const {\n        // By default, we don't want to detach the previous screen of the active one for modals\n        detachPreviousScreen = options.presentation === 'transparentModal'\n          ? false\n          : options.cardStyleInterpolator === forModalPresentationIOS\n          ? i !==\n            scenes\n              .map((scene) => scene.descriptor.options.cardStyleInterpolator)\n              .lastIndexOf(forModalPresentationIOS)\n          : true,\n      } = options;\n\n      if (detachPreviousScreen === false) {\n        activeScreensLimit++;\n      } else {\n        break;\n      }\n    }\n\n    const floatingHeader = (\n      <React.Fragment key=\"header\">\n        {renderHeader({\n          mode: 'float',\n          layout,\n          scenes,\n          getPreviousScene: this.getPreviousScene,\n          getFocusedRoute: this.getFocusedRoute,\n          onContentHeightChange: this.handleHeaderLayout,\n          style: [\n            styles.floating,\n            isFloatHeaderAbsolute && [\n              // Without this, the header buttons won't be touchable on Android when headerTransparent: true\n              { height: focusedHeaderHeight },\n              styles.absolute,\n            ],\n          ],\n        })}\n      </React.Fragment>\n    );\n\n    return (\n      <Background>\n        {isFloatHeaderAbsolute ? null : floatingHeader}\n        <MaybeScreenContainer\n          enabled={detachInactiveScreens}\n          style={styles.container}\n          onLayout={this.handleLayout}\n        >\n          {routes.map((route, index, self) => {\n            const focused = focusedRoute.key === route.key;\n            const gesture = gestures[route.key];\n            const scene = scenes[index];\n\n            // For the screens that shouldn't be active, the value is 0\n            // For those that should be active, but are not the top screen, the value is 1\n            // For those on top of the stack and with interaction enabled, the value is 2\n            // For the old implementation, it stays the same it was\n            let isScreenActive: Animated.AnimatedInterpolation | 2 | 1 | 0 = 1;\n\n            if (index < self.length - activeScreensLimit - 1) {\n              // screen should be inactive because it is too deep in the stack\n              isScreenActive = STATE_INACTIVE;\n            } else {\n              const sceneForActivity = scenes[self.length - 1];\n              const outputValue =\n                index === self.length - 1\n                  ? STATE_ON_TOP // the screen is on top after the transition\n                  : index >= self.length - activeScreensLimit\n                  ? STATE_TRANSITIONING_OR_BELOW_TOP // the screen should stay active after the transition, it is not on top but is in activeLimit\n                  : STATE_INACTIVE; // the screen should be active only during the transition, it is at the edge of activeLimit\n              isScreenActive = sceneForActivity\n                ? sceneForActivity.progress.current.interpolate({\n                    inputRange: [0, 1 - EPSILON, 1],\n                    outputRange: [1, 1, outputValue],\n                    extrapolate: 'clamp',\n                  })\n                : STATE_TRANSITIONING_OR_BELOW_TOP;\n            }\n\n            const {\n              headerShown = true,\n              headerTransparent,\n              headerStyle,\n              headerTintColor,\n            } = scene.descriptor.options;\n\n            const safeAreaInsetTop = insets.top;\n            const safeAreaInsetRight = insets.right;\n            const safeAreaInsetBottom = insets.bottom;\n            const safeAreaInsetLeft = insets.left;\n\n            const headerHeight =\n              headerShown !== false ? headerHeights[route.key] : 0;\n\n            const { backgroundColor: headerBackgroundColor } =\n              StyleSheet.flatten(headerStyle) || {};\n\n            let headerDarkContent: boolean | undefined;\n\n            if (headerShown) {\n              if (headerTintColor) {\n                headerDarkContent = Color(headerTintColor).isDark();\n              } else if (typeof headerBackgroundColor === 'string') {\n                headerDarkContent = !Color(headerBackgroundColor).isDark();\n              }\n            }\n\n            // Start from current card and count backwards the number of cards with same interpolation\n            const interpolationIndex = getInterpolationIndex(scenes, index);\n\n            const isNextScreenTransparent =\n              scenes[index + 1]?.descriptor.options.presentation ===\n              'transparentModal';\n\n            const detachCurrentScreen =\n              scenes[index + 1]?.descriptor.options.detachPreviousScreen !==\n              false;\n\n            return (\n              <MaybeScreen\n                key={route.key}\n                style={StyleSheet.absoluteFill}\n                enabled={detachInactiveScreens}\n                active={isScreenActive}\n                pointerEvents=\"box-none\"\n              >\n                <CardContainer\n                  index={index}\n                  interpolationIndex={interpolationIndex}\n                  active={index === self.length - 1}\n                  focused={focused}\n                  closing={closingRouteKeys.includes(route.key)}\n                  layout={layout}\n                  gesture={gesture}\n                  scene={scene}\n                  safeAreaInsetTop={safeAreaInsetTop}\n                  safeAreaInsetRight={safeAreaInsetRight}\n                  safeAreaInsetBottom={safeAreaInsetBottom}\n                  safeAreaInsetLeft={safeAreaInsetLeft}\n                  onGestureStart={onGestureStart}\n                  onGestureCancel={onGestureCancel}\n                  onGestureEnd={onGestureEnd}\n                  headerHeight={headerHeight}\n                  isParentHeaderShown={isParentHeaderShown}\n                  onHeaderHeightChange={this.handleHeaderLayout}\n                  getPreviousScene={this.getPreviousScene}\n                  getFocusedRoute={this.getFocusedRoute}\n                  headerDarkContent={headerDarkContent}\n                  hasAbsoluteFloatHeader={\n                    isFloatHeaderAbsolute && !headerTransparent\n                  }\n                  renderHeader={renderHeader}\n                  renderScene={renderScene}\n                  onOpenRoute={onOpenRoute}\n                  onCloseRoute={onCloseRoute}\n                  onTransitionStart={onTransitionStart}\n                  onTransitionEnd={onTransitionEnd}\n                  isNextScreenTransparent={isNextScreenTransparent}\n                  detachCurrentScreen={detachCurrentScreen}\n                />\n              </MaybeScreen>\n            );\n          })}\n        </MaybeScreenContainer>\n        {isFloatHeaderAbsolute ? floatingHeader : null}\n      </Background>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n  },\n  floating: {\n    zIndex: 1,\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}