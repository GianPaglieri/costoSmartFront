{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"initialRouteName\", \"defaultStatus\", \"backBehavior\", \"children\", \"screenListeners\", \"screenOptions\", \"openByDefault\", \"lazy\", \"drawerContentOptions\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { createNavigatorFactory, DrawerRouter, useNavigationBuilder } from '@react-navigation/native';\nimport * as React from 'react';\nimport warnOnce from 'warn-once';\nimport DrawerView from \"../views/DrawerView\";\nfunction DrawerNavigator(_ref) {\n  var initialRouteName = _ref.initialRouteName,\n    defaultStatus = _ref.defaultStatus,\n    backBehavior = _ref.backBehavior,\n    children = _ref.children,\n    screenListeners = _ref.screenListeners,\n    screenOptions = _ref.screenOptions,\n    openByDefault = _ref.openByDefault,\n    lazy = _ref.lazy,\n    drawerContentOptions = _ref.drawerContentOptions,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var defaultScreenOptions = {};\n  if (drawerContentOptions) {\n    Object.assign(defaultScreenOptions, {\n      drawerPosition: drawerContentOptions.drawerPosition,\n      drawerType: drawerContentOptions.drawerType,\n      swipeEdgeWidth: drawerContentOptions.edgeWidth,\n      drawerHideStatusBarOnOpen: drawerContentOptions.hideStatusBar,\n      keyboardDismissMode: drawerContentOptions.keyboardDismissMode,\n      swipeMinDistance: drawerContentOptions.minSwipeDistance,\n      overlayColor: drawerContentOptions.overlayColor,\n      drawerStatusBarAnimation: drawerContentOptions.statusBarAnimation,\n      gestureHandlerProps: drawerContentOptions.gestureHandlerProps\n    });\n    Object.keys(defaultScreenOptions).forEach(function (key) {\n      if (defaultScreenOptions[key] === undefined) {\n        delete defaultScreenOptions[key];\n      }\n    });\n    warnOnce(drawerContentOptions, \"Drawer Navigator: 'drawerContentOptions' is deprecated. Migrate the options to 'screenOptions' instead.\\n\\nPlace the following in 'screenOptions' in your code to keep current behavior:\\n\\n\" + JSON.stringify(defaultScreenOptions, null, 2) + \"\\n\\nSee https://reactnavigation.org/docs/drawer-navigator#options for more details.\");\n  }\n  if (typeof lazy === 'boolean') {\n    defaultScreenOptions.lazy = lazy;\n    warnOnce(true, \"Drawer Navigator: 'lazy' in props is deprecated. Move it to 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/drawer-navigator/#lazy for more details.\");\n  }\n  if (typeof openByDefault === 'boolean') {\n    warnOnce(true, \"Drawer Navigator: 'openByDefault' is deprecated. Use 'defaultStatus' and set it to 'open' or 'closed' instead.\\n\\nSee https://reactnavigation.org/docs/drawer-navigator/#defaultstatus for more details.\");\n  }\n  var _useNavigationBuilder = useNavigationBuilder(DrawerRouter, {\n      initialRouteName: initialRouteName,\n      defaultStatus: defaultStatus !== undefined ? defaultStatus : openByDefault ? 'open' : 'closed',\n      backBehavior: backBehavior,\n      children: children,\n      screenListeners: screenListeners,\n      screenOptions: screenOptions,\n      defaultScreenOptions: defaultScreenOptions\n    }),\n    state = _useNavigationBuilder.state,\n    descriptors = _useNavigationBuilder.descriptors,\n    navigation = _useNavigationBuilder.navigation,\n    NavigationContent = _useNavigationBuilder.NavigationContent;\n  return React.createElement(NavigationContent, null, React.createElement(DrawerView, _extends({}, rest, {\n    state: state,\n    descriptors: descriptors,\n    navigation: navigation\n  })));\n}\nexport default createNavigatorFactory(DrawerNavigator);","map":{"version":3,"names":["createNavigatorFactory","DrawerRouter","useNavigationBuilder","React","warnOnce","DrawerView","DrawerNavigator","_ref","initialRouteName","defaultStatus","backBehavior","children","screenListeners","screenOptions","openByDefault","lazy","drawerContentOptions","rest","_objectWithoutProperties","_excluded","defaultScreenOptions","Object","assign","drawerPosition","drawerType","swipeEdgeWidth","edgeWidth","drawerHideStatusBarOnOpen","hideStatusBar","keyboardDismissMode","swipeMinDistance","minSwipeDistance","overlayColor","drawerStatusBarAnimation","statusBarAnimation","gestureHandlerProps","keys","forEach","key","undefined","JSON","stringify","_useNavigationBuilder","state","descriptors","navigation","NavigationContent","createElement","_extends"],"sources":["C:\\Users\\Gian\\Desktop\\CostoSmart\\frontend\\node_modules\\@react-navigation\\drawer\\lib\\module\\navigators\\createDrawerNavigator.tsx"],"sourcesContent":["import {\n  createNavigatorFactory,\n  DefaultNavigatorOptions,\n  DrawerActionHelpers,\n  DrawerNavigationState,\n  DrawerRouter,\n  DrawerRouterOptions,\n  ParamListBase,\n  useNavigationBuilder,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport warnOnce from 'warn-once';\n\nimport type {\n  DrawerNavigationConfig,\n  DrawerNavigationEventMap,\n  DrawerNavigationOptions,\n} from '../types';\nimport DrawerView from '../views/DrawerView';\n\ntype Props = DefaultNavigatorOptions<\n  ParamListBase,\n  DrawerNavigationState<ParamListBase>,\n  DrawerNavigationOptions,\n  DrawerNavigationEventMap\n> &\n  DrawerRouterOptions &\n  DrawerNavigationConfig;\n\nfunction DrawerNavigator({\n  initialRouteName,\n  defaultStatus,\n  backBehavior,\n  children,\n  screenListeners,\n  screenOptions,\n  // @ts-expect-error: openByDefault is deprecated\n  openByDefault,\n  // @ts-expect-error: lazy is deprecated\n  lazy,\n  // @ts-expect-error: drawerContentOptions is deprecated\n  drawerContentOptions,\n  ...rest\n}: Props) {\n  let defaultScreenOptions: DrawerNavigationOptions = {};\n\n  if (drawerContentOptions) {\n    Object.assign(defaultScreenOptions, {\n      drawerPosition: drawerContentOptions.drawerPosition,\n      drawerType: drawerContentOptions.drawerType,\n      swipeEdgeWidth: drawerContentOptions.edgeWidth,\n      drawerHideStatusBarOnOpen: drawerContentOptions.hideStatusBar,\n      keyboardDismissMode: drawerContentOptions.keyboardDismissMode,\n      swipeMinDistance: drawerContentOptions.minSwipeDistance,\n      overlayColor: drawerContentOptions.overlayColor,\n      drawerStatusBarAnimation: drawerContentOptions.statusBarAnimation,\n      gestureHandlerProps: drawerContentOptions.gestureHandlerProps,\n    });\n\n    (\n      Object.keys(defaultScreenOptions) as (keyof DrawerNavigationOptions)[]\n    ).forEach((key) => {\n      if (defaultScreenOptions[key] === undefined) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete defaultScreenOptions[key];\n      }\n    });\n\n    warnOnce(\n      drawerContentOptions,\n      `Drawer Navigator: 'drawerContentOptions' is deprecated. Migrate the options to 'screenOptions' instead.\\n\\nPlace the following in 'screenOptions' in your code to keep current behavior:\\n\\n${JSON.stringify(\n        defaultScreenOptions,\n        null,\n        2\n      )}\\n\\nSee https://reactnavigation.org/docs/drawer-navigator#options for more details.`\n    );\n  }\n\n  if (typeof lazy === 'boolean') {\n    defaultScreenOptions.lazy = lazy;\n\n    warnOnce(\n      true,\n      `Drawer Navigator: 'lazy' in props is deprecated. Move it to 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/drawer-navigator/#lazy for more details.`\n    );\n  }\n\n  if (typeof openByDefault === 'boolean') {\n    warnOnce(\n      true,\n      `Drawer Navigator: 'openByDefault' is deprecated. Use 'defaultStatus' and set it to 'open' or 'closed' instead.\\n\\nSee https://reactnavigation.org/docs/drawer-navigator/#defaultstatus for more details.`\n    );\n  }\n\n  const { state, descriptors, navigation, NavigationContent } =\n    useNavigationBuilder<\n      DrawerNavigationState<ParamListBase>,\n      DrawerRouterOptions,\n      DrawerActionHelpers<ParamListBase>,\n      DrawerNavigationOptions,\n      DrawerNavigationEventMap\n    >(DrawerRouter, {\n      initialRouteName,\n      defaultStatus:\n        defaultStatus !== undefined\n          ? defaultStatus\n          : openByDefault\n          ? 'open'\n          : 'closed',\n      backBehavior,\n      children,\n      screenListeners,\n      screenOptions,\n      defaultScreenOptions,\n    });\n\n  return (\n    <NavigationContent>\n      <DrawerView\n        {...rest}\n        state={state}\n        descriptors={descriptors}\n        navigation={navigation}\n      />\n    </NavigationContent>\n  );\n}\n\nexport default createNavigatorFactory<\n  DrawerNavigationState<ParamListBase>,\n  DrawerNavigationOptions,\n  DrawerNavigationEventMap,\n  typeof DrawerNavigator\n>(DrawerNavigator);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}