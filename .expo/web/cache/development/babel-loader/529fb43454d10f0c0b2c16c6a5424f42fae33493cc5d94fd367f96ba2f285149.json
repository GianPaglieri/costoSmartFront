{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport axios from 'axios';\nimport styles from \"../styles\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar IngredientListScreen = function IngredientListScreen(_ref) {\n  var navigation = _ref.navigation;\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    ingredientes = _useState2[0],\n    setIngredientes = _useState2[1];\n  useEffect(function () {\n    fetchIngredientes();\n  }, []);\n  var fetchIngredientes = function fetchIngredientes() {\n    var response;\n    return _regeneratorRuntime.async(function fetchIngredientes$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(axios.get('http://localhost:3307/ingredientes'));\n          case 3:\n            response = _context.sent;\n            setIngredientes(response.data);\n            _context.next = 10;\n            break;\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](0);\n            console.error('Error al obtener los ingredientes:', _context.t0);\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  };\n  var renderIngrediente = function renderIngrediente(_ref2) {\n    var item = _ref2.item;\n    return _jsxs(View, {\n      style: styles.ingredienteContainer,\n      children: [_jsx(Text, {\n        style: styles.ingredienteText,\n        children: item.nombre\n      }), _jsxs(Text, {\n        style: styles.ingredienteText,\n        children: [\"Unidad de medida: \", item.unidadMedida]\n      }), _jsxs(Text, {\n        style: styles.ingredienteText,\n        children: [\"Tama\\xF1o del paquete: \", item.tamanoPaquete]\n      }), _jsxs(Text, {\n        style: styles.ingredienteText,\n        children: [\"Costo: $\", item.costo]\n      })]\n    });\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.title,\n      children: \"Lista de Ingredientes\"\n    }), _jsx(FlatList, {\n      data: ingredientes,\n      renderItem: renderIngrediente,\n      keyExtractor: function keyExtractor(item) {\n        return item.id.toString();\n      }\n    }), _jsx(TouchableOpacity, {\n      style: styles.addButton,\n      onPress: function onPress() {\n        return navigation.navigate('IngredientForm');\n      },\n      children: _jsx(Text, {\n        style: styles.addButtonText,\n        children: \"Agregar Ingrediente\"\n      })\n    })]\n  });\n};\nexport default IngredientListScreen;","map":{"version":3,"names":["React","useEffect","useState","View","Text","FlatList","TouchableOpacity","axios","styles","jsx","_jsx","jsxs","_jsxs","IngredientListScreen","_ref","navigation","_useState","_useState2","_slicedToArray","ingredientes","setIngredientes","fetchIngredientes","response","_regeneratorRuntime","async","fetchIngredientes$","_context","prev","next","awrap","get","sent","data","t0","console","error","stop","Promise","renderIngrediente","_ref2","item","style","ingredienteContainer","children","ingredienteText","nombre","unidadMedida","tamanoPaquete","costo","container","title","renderItem","keyExtractor","id","toString","addButton","onPress","navigate","addButtonText"],"sources":["C:/Users/Gian/Desktop/CostoSmart/frontend/src/screens/IngredientesScreen.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { View, Text, FlatList, TouchableOpacity } from 'react-native';\r\nimport axios from 'axios';\r\nimport styles from '../styles';\r\n\r\nconst IngredientListScreen = ({ navigation }) => {\r\n  const [ingredientes, setIngredientes] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchIngredientes();\r\n  }, []);\r\n\r\n  const fetchIngredientes = async () => {\r\n    try {\r\n      const response = await axios.get('http://localhost:3307/ingredientes');\r\n      setIngredientes(response.data);\r\n    } catch (error) {\r\n      console.error('Error al obtener los ingredientes:', error);\r\n    }\r\n  };\r\n\r\n  const renderIngrediente = ({ item }) => (\r\n    <View style={styles.ingredienteContainer}>\r\n      <Text style={styles.ingredienteText}>{item.nombre}</Text>\r\n      <Text style={styles.ingredienteText}>Unidad de medida: {item.unidadMedida}</Text>\r\n      <Text style={styles.ingredienteText}>Tama√±o del paquete: {item.tamanoPaquete}</Text>\r\n      <Text style={styles.ingredienteText}>Costo: ${item.costo}</Text>\r\n    </View>\r\n  );\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Text style={styles.title}>Lista de Ingredientes</Text>\r\n      <FlatList\r\n        data={ingredientes}\r\n        renderItem={renderIngrediente}\r\n        keyExtractor={(item) => item.id.toString()}\r\n      />\r\n      <TouchableOpacity\r\n        style={styles.addButton}\r\n        onPress={() => navigation.navigate('IngredientForm')}\r\n      >\r\n        <Text style={styles.addButtonText}>Agregar Ingrediente</Text>\r\n      </TouchableOpacity>\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default IngredientListScreen;\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}